<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.String" name="ModelTypeNamespace" #>
<#@ parameter type="System.String" name="ODataModificationMessage" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
var routePrefix = "odata/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.ModelBinding;
using System.Web.Http.OData;
using System.Web.Http.OData.Query;
using Repository.Pattern.Infrastructure;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>
using Repository.Pattern.UnitOfWork;
using Northwind.Service;

namespace <#= Namespace #>
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var fullModelTypeName = ModelTypeNamespace + "." + ModelTypeName;
    var entitySetVariable = ModelMetadata.EntitySetName.ToLowerInvariant();
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
<# if (!String.IsNullOrEmpty(ODataModificationMessage)) { #>
    /*
    <#= ODataModificationMessage #>

    using System.Web.Http.OData.Builder;
<# if (!String.IsNullOrEmpty(ModelTypeNamespace)) { #>
    using <#= ModelTypeNamespace #>;
<# } #>
    ODataConventionModelBuilder builder = new ODataConventionModelBuilder();
    builder.EntitySet<<#= ModelTypeName #>>("<#= ControllerRootName #>");
<#
HashSet<string> encounteredTypes = new HashSet<string>();
encounteredTypes.Add(fullModelTypeName);
foreach (var property in ModelMetadata.Properties) {
    if (property.IsAssociation && encounteredTypes.Add(property.TypeName)) { 
#>
    builder.EntitySet<<#= property.ShortTypeName #>>("<#= GetEntitySetName(property) #>"); 
<# } } #>
    config.Routes.MapODataRoute("odata", "odata", builder.GetEdmModel());
    */
<# } #>
    public class <#= ControllerName #> : ODataController
    {
        private readonly I<#= ModelTypeName #>Service _<#= ModelVariable #>Service;
        private readonly IUnitOfWorkAsync _unitOfWork;

        public <#= ModelTypeName #>Controller(
            IUnitOfWorkAsync unitOfWork,
            I<#= ModelTypeName #>Service <#= ModelVariable #>Service)
        {
            _unitOfWork = unitOfWork;
            _<#= ModelVariable #>Service = <#= ModelVariable #>Service;
        }

        [Queryable(AllowedQueryOptions = AllowedQueryOptions.All)]
        public IQueryable<<#= ModelTypeName #>> Get<#= ModelTypeName #>()
        {
            return _<#= ModelVariable #>Service.ODataQueryable();
        }

        // GET <#= routePrefix #>(5)
        [Queryable]
        public SingleResult<<#= ModelTypeName #>> Get<#= ModelTypeName #>([FromODataUri] <#= primaryKeyShortTypeName #> key)
        {
            return SingleResult.Create(
                _<#= ModelVariable #>Service
                    .Query(<#= ModelVariable #> => <#= ModelVariable #>.<#= primaryKeyName #> == key)
                    .Select()
                    .AsQueryable());
        }

        // PUT <#= routePrefix #>(5)
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put([FromODataUri] <#= primaryKeyShortTypeName #> key, <#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put([FromODataUri] <#= primaryKeyShortTypeName #> key, <#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (key != <#= ModelVariable #>.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

			<#= ModelVariable #>.ObjectState = ObjectState.Modified;
			_<#= ModelVariable #>Service.Update(<#= ModelVariable #>);

            try
            {
<# if (UseAsync) { #>
                await _unitOfWork.SaveChangesAsync();
<# } else { #>
                _unitOfWork.SaveChanges();
<# } #>
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= ModelTypeName #>Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return Updated(<#= ModelVariable #>);
        }

        // POST <#= routePrefix #>
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post(<#= ModelTypeName #> <#= ModelVariable #>)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

			<#= ModelVariable #>.ObjectState = ObjectState.Added;
            _<#= ModelVariable #>Service.Insert(<#= ModelVariable #>);
<# if(primaryKeyIsAutoGenerated) { #>
<#		if (UseAsync) { #>
            await _unitOfWork.SaveChangesAsync();

<#		} else { #>
            _unitOfWork.SaveChanges();
<#		} #>
<# } else { #>

            try
            {
<#		if (UseAsync) { #>
                await _unitOfWork.SaveChangesAsync();
<#		} else { #>
                _unitOfWork.SaveChanges();
<#		} #>
            }
            catch (DbUpdateException)
            {
                if (<#= ModelTypeName #>Exists(<#= ModelVariable #>.<#= primaryKeyName #>))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }
<# } #>

            return Created(<#= ModelVariable #>);
        }

        // PATCH <#= routePrefix #>(5)
        [AcceptVerbs("PATCH", "MERGE")]
<#		if (UseAsync) { #>
        public async Task<IHttpActionResult> Patch([FromODataUri] <#= primaryKeyShortTypeName #> key, Delta<<#= ModelTypeName #>> patch)
<#		} else { #>
        public IHttpActionResult Patch([FromODataUri] <#= primaryKeyShortTypeName #> key, Delta<<#= ModelTypeName #>> patch)
<#		} #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

<# if (UseAsync) { #>
            var <#= ModelVariable #> = await _<#= ModelVariable #>Service.FindAsync(key);
<# } else { #>
            var <#= ModelVariable #> = _<#= ModelVariable #>Service.Find(key);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

            patch.Patch(<#= ModelVariable #>);

			<#= ModelVariable #>.ObjectState = ObjectState.Modified;
			_<#= ModelVariable #>Service.Update(<#= ModelVariable #>);

            try
            {
<# if (UseAsync) { #>
                await _unitOfWork.SaveChangesAsync();
<# } else { #>
                _unitOfWork.SaveChanges();
<# } #>
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!<#= ModelTypeName #>Exists(key))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return Updated(<#= ModelVariable #>);
        }

        // DELETE <#= routePrefix #>(5)
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } else { #>
        public IHttpActionResult Delete([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } #>
        {
<# if (UseAsync) { #>
            var <#= ModelVariable #> = await _<#= ModelVariable #>Service.FindAsync(key);
<# } else { #>
            var <#= ModelVariable #> = _<#= ModelVariable #>Service.Find(key);
<# } #>
            if (<#= ModelVariable #> == null)
            {
                return NotFound();
            }

			<#= ModelVariable #>.ObjectState = ObjectState.Deleted;
			_<#= ModelVariable #>Service.Delete(<#= ModelVariable #>);
<# if (UseAsync) { #>
            await _unitOfWork.SaveChangesAsync();
<# } else { #>
            _unitOfWork.SaveChanges();
<# } #>

            return StatusCode(HttpStatusCode.NoContent);
        }

<# foreach (var property in ModelMetadata.Properties) {
    if (property.IsAssociation) { 
    var isSingleResult = property.AssociationDirection == AssociationDirection.OneToOne || property.AssociationDirection == AssociationDirection.ManyToOne;
#>
        // GET <#= routePrefix #>(5)/<#= property.PropertyName #>
        [Queryable]
<# if (isSingleResult) { #>
        public SingleResult<<#= property.ShortTypeName #>> Get<#= property.PropertyName #>([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } else { #>
        public IQueryable<<#= property.ShortTypeName #>> Get<#= property.PropertyName #>([FromODataUri] <#= primaryKeyShortTypeName #> key)
<# } #>
        {
<# if (isSingleResult) { #>
            return SingleResult.Create(
				_<#= ModelVariable #>Service
				.Query(m => m.<#= primaryKeyName #> == key)
				.Select(m => m.<#= property.PropertyName #>)
				.AsQueryable());
<# } else { #>
			var <#= ModelVariable #> = _<#= ModelVariable #>Service
				.Query(m => m.<#= primaryKeyName #> == key)
				.Include(m => m.<#= property.PropertyName #>)
				.Select()
				.Single();

            return <#= ModelVariable #>.<#= property.PropertyName #>.AsQueryable();
<# } #>
        }

<# } } #>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _unitOfWork.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool <#= ModelTypeName #>Exists(<#= primaryKeyShortTypeName #> key)
        {
			return _<#= ModelVariable #>Service.Query(e => e.<#= primaryKeyName #> == key).Select().Any();
        }
    }
}
<#+
RelatedModelMetadata GetRelatedModelMetadata(PropertyMetadata property){
    RelatedModelMetadata propertyModel;
    IDictionary<string, RelatedModelMetadata> relatedProperties;
    if(ModelMetadata.RelatedEntities != null)
    {
        relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
    }
    else
    {
        relatedProperties = new Dictionary<string, RelatedModelMetadata>();
    }
    relatedProperties.TryGetValue(property.PropertyName, out propertyModel);

    return propertyModel;
}


string GetEntitySetName(PropertyMetadata property) {
    RelatedModelMetadata propertyModel = GetRelatedModelMetadata(property);
    return propertyModel != null ? propertyModel.EntitySetName : property.ShortTypeName;
}
#>